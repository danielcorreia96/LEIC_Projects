package org.komparator.mediator.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.net.ConnectException;
import java.net.SocketTimeoutException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.WebServiceException;

import org.komparator.mediator.ws.CartView;
import org.komparator.mediator.ws.EmptyCart_Exception;
import org.komparator.mediator.ws.InvalidCartId_Exception;
import org.komparator.mediator.ws.InvalidCreditCard_Exception;
import org.komparator.mediator.ws.InvalidItemId_Exception;
import org.komparator.mediator.ws.InvalidQuantity_Exception;
import org.komparator.mediator.ws.InvalidText_Exception;
import org.komparator.mediator.ws.ItemIdView;
import org.komparator.mediator.ws.ItemView;
import org.komparator.mediator.ws.MediatorPortType;
import org.komparator.mediator.ws.MediatorService;
import org.komparator.mediator.ws.NotEnoughItems_Exception;
import org.komparator.mediator.ws.ShoppingResultView;
import org.komparator.security.handler.RandomNumberHandler;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;


/**
 * Client.
 *
 * Adds easier endpoint address configuration and 
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class MediatorClient implements MediatorPortType {

     /** WS service */
     MediatorService service = null;

     /** WS port (port type is the interface, port is the implementation) */
     MediatorPortType port = null;

    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL

    /** Receive timeout value **/
    private int receiveTimeout = 10000;
    
    public String getWsURL() {
        return wsURL;
    }

    /** output option **/
    private boolean verbose = false;

	private int currentRequestId;

    public boolean isVerbose() {
        return verbose;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    /** constructor with provided web service URL */
    public MediatorClient(String wsURL) throws MediatorClientException {
        this.wsURL = wsURL;
        createStub();
        // gerar primeiro numero aleatorio
		generateRandomNumber();
    }

    /** constructor with provided UDDI location and name */
    public MediatorClient(String uddiURL, String wsName) throws MediatorClientException {
        this.uddiURL = uddiURL;
        this.wsName = wsName;
        uddiLookup();
        createStub();
        // gerar primeiro numero aleatorio
		generateRandomNumber();

    }

    /** UDDI lookup */
    private void uddiLookup() throws MediatorClientException {
        try {
            if (verbose)
                System.out.printf("Contacting UDDI at %s%n", uddiURL);
            UDDINaming uddiNaming = new UDDINaming(uddiURL);

            if (verbose)
                System.out.printf("Looking for '%s'%n", wsName);
            wsURL = uddiNaming.lookup(wsName);

        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new MediatorClientException(msg, e);
        }

        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new MediatorClientException(msg);
        }
    }

    /** Stub creation and configuration */
    private void createStub() {
        if (verbose)
            System.out.println("Creating stub ...");

         service = new MediatorService();
         port = service.getMediatorPort();

        if (wsURL != null) {
            if (verbose)
                System.out.println("Setting endpoint address ...");
            
            setMessageReceiveTimeout();
        }
    }

	private void setMessageReceiveTimeout() {
		BindingProvider bindingProvider = (BindingProvider) port;
		Map<String, Object> requestContext = bindingProvider.getRequestContext();
		requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
		
		// The receive timeout property has alternative names
		// Again, set them all to avoid compatibility issues
		final List<String> RECV_TIME_PROPS = new ArrayList<String>();
		RECV_TIME_PROPS.add("com.sun.xml.ws.request.timeout");
		RECV_TIME_PROPS.add("com.sun.xml.internal.ws.request.timeout");
		RECV_TIME_PROPS.add("javax.xml.ws.client.receiveTimeout");
		
		// Set timeout until the response is received (unit is milliseconds; 0 means infinite)
		for (String propName : RECV_TIME_PROPS)
		    requestContext.put(propName, this.receiveTimeout);
		System.out.printf("Set receive timeout to %d milliseconds%n", this.receiveTimeout);
	}
    
    // helper methods ----------------------------
	private void addRequestIdForHandler() {
		// access request context
    	 BindingProvider bindingProvider = (BindingProvider) port;
    	 Map<String, Object> requestContext = bindingProvider.getRequestContext();

    	 // put token in request context
    	 String clientRequestId = String.valueOf(currentRequestId);
    	 System.out.printf("put token '%s' on request context%n", clientRequestId);
    	 requestContext.put(RandomNumberHandler.REQUEST_PROPERTY, clientRequestId);

    	 // set endpoint address
    	 requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
	}

	private void generateRandomNumber() {
		try {
			SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
			currentRequestId = Math.abs(random.nextInt());
			System.out.println("Numero aleatorio gerado:  " + currentRequestId);
		} catch (NoSuchAlgorithmException e) {
			System.out.println("Failed to generate random number: algorithm not available");
		}
	}

	private void renewConnection() {
		boolean failedToRenewConnection = true;
		while(failedToRenewConnection){
			try {
				System.out.println("updating UDDI");
				uddiLookup();
				createStub();
				failedToRenewConnection = false;
			} 
			catch (MediatorClientException e) {
				System.out.println("Failed to renew the connection: maybe the backup isn't published yet? let's wait 3 seconds...");
				try {
					TimeUnit.SECONDS.sleep(3); // chill for a bit while backup gets published...
				} catch (InterruptedException ie) { } 
			}
		}
		System.out.println("Renew connection was successful!");
	}
	
	private boolean isExpectedWebServiceException(WebServiceException wse){
		System.out.println("Caught: " + wse);
		Throwable cause = wse.getCause();
		if(cause != null){
			return cause instanceof SocketTimeoutException || cause instanceof ConnectException;
		}
		return false;
	}
    
    // remote invocation methods ----------------------------------------------
    
     @Override
	 public void clear() {
    	 try {
    		 port.clear();
    	 } 
    	 catch(WebServiceException wse ) {
    		 if (isExpectedWebServiceException(wse) ) {
    			 renewConnection();
    			 clear();
    		 }
    	 }
	 }

     @Override
	 public String ping(String arg0) {
    	 String result = null; //TODO PERIGO!
    	 try {
    		 result = port.ping(arg0);
    	 } 
    	 catch(WebServiceException wse) {
    		 if (isExpectedWebServiceException(wse) ) {
    			 renewConnection();
    			 return ping(arg0);
    		 }
    	 }
    	 return result;
	 }

     @Override
	 public List<ItemView> searchItems(String descText) throws InvalidText_Exception {
    	 List<ItemView> result = null; //TODO PERIGO!
    	 try {
    		 result = port.searchItems(descText);
    	 } 
    	 catch(WebServiceException wse) {
    		 if (isExpectedWebServiceException(wse)) {
    			 renewConnection();
    			 return searchItems(descText);
    		 }
    	 }
    	 return result;
	 }

     @Override
	 public List<CartView> listCarts() {
    	 List<CartView> result = null;
    	 try {
    		 result = port.listCarts();
    	 } 
    	 catch(WebServiceException wse) {
    		 if (isExpectedWebServiceException(wse)) {
    			 renewConnection();
    			 return listCarts();
    		 }
    	 }
    	 return result;
	 }

	 @Override
	 public List<ItemView> getItems(String productId) throws InvalidItemId_Exception {
		 List<ItemView> result = null; //TODO PERIGO!
		 try {
			 result = port.getItems(productId);
		 } 
		 catch(WebServiceException wse) {
			 if (isExpectedWebServiceException(wse)) {
				 renewConnection();
				 return getItems(productId);
			 }
		 }
		 return result;
	 }

	 @Override
	 public ShoppingResultView buyCart(String cartId, String creditCardNr)
			 throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {
		 ShoppingResultView result = null; //TODO PERIGO!
		 try {
			 addRequestIdForHandler();
			 result = port.buyCart(cartId, creditCardNr);
		 } 
		 catch(WebServiceException wse) {
			 if (isExpectedWebServiceException(wse)) {
				 renewConnection();
				 return buyCart(cartId, creditCardNr);
			 }
		 }
		 catch(IllegalArgumentException ie){
			 renewConnection();
			 return buyCart(cartId, creditCardNr);
		 }
		 generateRandomNumber();
		 return result;
	 }
	 
	 @Override
	 public void addToCart(String cartId, ItemIdView itemId, int itemQty) throws InvalidCartId_Exception,
			 InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception {
		 try {
			 addRequestIdForHandler();
			 port.addToCart(cartId, itemId, itemQty);
		 } 
		 catch(WebServiceException wse) {
			 if (isExpectedWebServiceException(wse)) {
				 renewConnection();
				 addToCart(cartId, itemId, itemQty);
			 }
		 }
		 catch(IllegalArgumentException ie){
			 renewConnection();
			 addToCart(cartId, itemId, itemQty);
		 }
		 generateRandomNumber();
	 }

	 @Override
	 public List<ShoppingResultView> shopHistory() {
		 List<ShoppingResultView> result = null;
		 try {
			 result = port.shopHistory();
		 } 
		 catch(WebServiceException wse) {
			 if (isExpectedWebServiceException(wse)) {
				 renewConnection();
				 return shopHistory();
			 }
		 }
		 return result;
	 }
	 
	 @Override
	 public void imAlive(){
		 port.imAlive();
	 }

	@Override
	public void updateShopHistory(ShoppingResultView shopResult, String clientRequestId) {
		port.updateShopHistory(shopResult, clientRequestId);
	}

	@Override
	public void updateCart(CartView cart, String clientRequestId) {
		port.updateCart(cart, clientRequestId);
	}
}